class FoodInfo:
    def __init__(self, proteins, fats, carbohydrates):
        self.proteins = proteins
        self.fats = fats
        self.carbohydrates = carbohydrates

    def __repr__(self):
        return f'FoodInfo({self.proteins}, {self.fats}, {self.carbohydrates})'

    def __add__(self, other):
        if isinstance(other, FoodInfo):
            return FoodInfo(self.proteins + other.proteins, self.fats + other.fats,
                            self.carbohydrates + other.carbohydrates)
        return NotImplemented

    def __mul__(self, other):
        if isinstance(other, int | float):
            return FoodInfo(self.proteins * other, self.fats * other, self.carbohydrates * other)
        return NotImplemented

    def __truediv__(self, other):
        if isinstance(other, int | float):
            return FoodInfo(self.proteins / other, self.fats / other, self.carbohydrates / other)
        return NotImplemented

    def __floordiv__(self, other):
        if isinstance(other, int | float):
            return FoodInfo(self.proteins // other, self.fats // other, self.carbohydrates // other)
        return NotImplemented

food1 = FoodInfo(10, 20, 30)
food2 = FoodInfo(10, 10, 20)

print(food1 + food2)
print(food1 * 2)
print(food1 / 2)
print(food1 // 2)

food1 = FoodInfo(10, 20, 30)

try:
    food2 = (5, 10, 15) + food1
except TypeError:
    print('Некорректный тип данных')

# TEST_4:
print('Test4')
food1 = FoodInfo(10, 20, 30)
pfc = [(79, 89, 14), (71, 46, 54), (75, 82, 37), (97, 11, 68), (36, 22, 87), (12, 11, 76), (19, 87, 88), (88, 66, 18),
       (76, 97, 19), (27, 61, 27), (18, 84, 15), (79, 96, 93), (83, 99, 33), (22, 57, 84), (66, 24, 38), (90, 61, 31),
       (40, 91, 100), (32, 46, 49), (72, 36, 83), (75, 89, 75), (37, 50, 83), (79, 85, 65), (63, 11, 82), (77, 39, 23),
       (29, 95, 81), (21, 51, 39), (100, 37, 76), (76, 51, 30), (70, 62, 96), (71, 95, 27), (54, 33, 34), (23, 48, 89),
       (48, 25, 56), (63, 40, 38), (59, 69, 41), (79, 83, 68), (26, 17, 18), (41, 28, 13), (69, 70, 25), (89, 42, 57),
       (77, 88, 54), (81, 65, 62), (85, 47, 53), (77, 14, 36), (81, 15, 74), (81, 52, 59), (32, 64, 70), (82, 89, 47),
       (83, 72, 49), (35, 81, 84), (27, 71, 40), (65, 97, 25), (90, 29, 19), (77, 44, 68), (10, 97, 32), (59, 95, 19),
       (20, 17, 62), (11, 99, 68), (36, 68, 70), (69, 83, 94), (63, 32, 71), (94, 22, 78), (37, 22, 38), (77, 92, 46),
       (30, 76, 19), (72, 70, 24), (40, 15, 28), (87, 62, 25), (27, 52, 51), (24, 49, 78), (14, 45, 58), (97, 73, 17),
       (79, 27, 16), (37, 82, 72), (31, 71, 38), (53, 97, 47), (56, 16, 32), (77, 59, 24), (69, 69, 56), (20, 39, 77),
       (24, 35, 72), (67, 56, 43), (71, 24, 97), (28, 94, 78), (82, 45, 10), (15, 75, 55), (21, 44, 25), (72, 64, 45),
       (35, 88, 21), (18, 80, 75), (94, 69, 93), (39, 42, 41), (26, 15, 26), (28, 55, 45), (38, 25, 93), (55, 32, 94),
       (47, 96, 12), (67, 95, 47), (80, 73, 49), (41, 22, 17)]

for p, f, c in pfc:
    food2 = FoodInfo(p, f, c)
    print(food1 + food2, food1 * p, food1 // c)
print('--------------------')
print('Test5')
# TEST_5:
pfc = [(880, 1760, 2640), (910, 1820, 2730), (850, 1700, 2550), (430, 860, 1290), (260, 520, 780), (620, 1240, 1860),
          (850, 1700, 2550), (380, 760, 1140), (580, 1160, 1740), (480, 960, 1440), (540, 1080, 1620),
          (750, 1500, 2250), (410, 820, 1230), (1000, 2000, 3000), (810, 1620, 2430), (50, 100, 150), (530, 1060, 1590),
          (860, 1720, 2580), (900, 1800, 2700), (180, 360, 540), (810, 1620, 2430), (190, 380, 570), (370, 740, 1110),
          (520, 1040, 1560), (400, 800, 1200), (430, 860, 1290), (70, 140, 210), (440, 880, 1320), (860, 1720, 2580),
          (710, 1420, 2130), (870, 1740, 2610), (860, 1720, 2580), (960, 1920, 2880), (560, 1120, 1680),
          (120, 240, 360), (800, 1600, 2400), (290, 580, 870), (660, 1320, 1980), (930, 1860, 2790), (790, 1580, 2370),
          (160, 320, 480), (770, 1540, 2310), (970, 1940, 2910), (950, 1900, 2850), (330, 660, 990), (130, 260, 390),
          (660, 1320, 1980), (190, 380, 570), (380, 760, 1140), (970, 1940, 2910), (750, 1500, 2250), (140, 280, 420),
          (620, 1240, 1860), (410, 820, 1230), (310, 620, 930), (250, 500, 750), (670, 1340, 2010), (660, 1320, 1980),
          (70, 140, 210), (140, 280, 420), (370, 740, 1110), (480, 960, 1440), (100, 200, 300), (280, 560, 840),
          (240, 480, 720), (900, 1800, 2700), (400, 800, 1200), (850, 1700, 2550), (240, 480, 720), (970, 1940, 2910),
          (210, 420, 630), (260, 520, 780), (700, 1400, 2100), (220, 440, 660), (360, 720, 1080), (250, 500, 750),
          (870, 1740, 2610), (170, 340, 510), (340, 680, 1020), (750, 1500, 2250), (840, 1680, 2520), (400, 800, 1200),
          (210, 420, 630), (730, 1460, 2190), (220, 440, 660), (400, 800, 1200), (450, 900, 1350), (770, 1540, 2310),
          (600, 1200, 1800), (280, 560, 840), (140, 280, 420), (810, 1620, 2430), (750, 1500, 2250), (220, 440, 660),
          (550, 1100, 1650), (90, 180, 270), (380, 760, 1140), (960, 1920, 2880), (990, 1980, 2970), (550, 1100, 1650)]

for p, f, c in pfc:
    food = FoodInfo(p, f, c)
    print(food / 10)
print('--------------------')
print('Test6')
# TEST_6:
food1 = FoodInfo(10, 20, 30)
food2 = FoodInfo(10, 20, 30)

not_supported = [food2, [], {}, set(), '', frozenset(), ()]

for item in not_supported:
    print(food1.__add__(item))
    print(food1.__floordiv__(item))
    print(food1.__mul__(item))
    print(food1.__truediv__(item))
print('--------------------')
print('Test7')
# TEST_7:
pfc = [(751.26, 778.77, 947.51), (597.41, 508.5, 532.96), (800.55, 617.5, 525.14), (741.99, 785.53, 664.71),
       (525.69, 892.41, 541.41), (888.8, 802.56, 868.78), (609.65, 855.43, 949.44), (705.25, 592.28, 738.72),
       (514.88, 617.22, 557.5), (948.62, 938.7, 817.17), (783.98, 628.32, 686.38), (894.9, 815.81, 715.19),
       (586.79, 826.68, 637.5), (670.53, 683.69, 841.56), (583.9, 607.34, 853.35), (954.67, 950.76, 822.19),
       (718.94, 658.12, 537.2), (556.53, 686.17, 622.61), (699.8, 872.49, 908.3), (622.3, 920.97, 801.17)]

FoodInfo.__round__ = lambda instance: FoodInfo(
    round(instance.proteins, 2),
    round(instance.fats, 2),
    round(instance.carbohydrates, 2)
)

food1 = FoodInfo(1000, 2000, 3000)
for p, f, c in pfc:
    food2 = FoodInfo(p, f, c)
    add_food = food1 + food2
    mul_food = food1 * p
    truediv_food = food1 // c
    print(round(add_food), round(mul_food), round(truediv_food))
print('--------------------')
print('Test8')
# TEST_8:
food = FoodInfo(10, 20, 30)

print(food.__add__(1))
print(food.__mul__(range(5)))
print(food.__truediv__([1, 2, 3]))
print(food.__floordiv__({4, 5, 6}))
