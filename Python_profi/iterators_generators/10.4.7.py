class CardDeck:
    def __init__(self):
        self.m = [('туз', 'червей'), ('король', 'червей'), ('дама', 'червей'), ('валет', 'червей'), ('10', 'червей'),
                  ('9', 'червей'), ('8', 'червей'), ('7', 'червей'), ('6', 'червей'), ('5', 'червей'), ('4', 'червей'),
                  ('3', 'червей'), ('2', 'червей'), ('туз', 'бубен'), ('король', 'бубен'), ('дама', 'бубен'),
                  ('валет', 'бубен'), ('10', 'бубен'), ('9', 'бубен'), ('8', 'бубен'), ('7', 'бубен'),
                  ('6', 'бубен'), ('5', 'бубен'), ('4', 'бубен'), ('3', 'бубен'), ('2', 'бубен'), ('туз', 'треф'),
                  ('король', 'треф'), ('дама', 'треф'), ('валет', 'треф'), ('10', 'треф'), ('9', 'треф'),
                  ('8', 'треф'), ('7', 'треф'), ('6', 'треф'), ('5', 'треф'), ('4', 'треф'), ('3', 'треф'),
                  ('2', 'треф'), ('туз', 'пик'), ('король', 'пик'), ('дама', 'пик'), ('валет', 'пик'), ('10', 'пик'),
                  ('9', 'пик'), ('8', 'пик'), ('7', 'пик'), ('6', 'пик'), ('5', 'пик'), ('4', 'пик'), ('3', 'пик'),
                  ('2', 'пик')]


    def __iter__(self):
        return self

    def __next__(self):
        try:
            card = self.m.pop()
            return f'{card[0]} {card[1]}'
        except:
            raise StopIteration


cards = CardDeck()

print(next(cards))
print(next(cards))

cards = list(CardDeck())

print(cards[9])
print(cards[23])
print(cards[37])
print(cards[51])

# class CardDeck:
#     def __init__(self):
#         self.suits = ("пик", "треф", "бубен", "червей")
#         self.values = ("2", "3", "4", "5", "6", "7", "8", "9", "10", "валет", "дама", "король", "туз")
#         self.count = -1
#
#     def __iter__(self):
#         return self
#
#     def __next__(self):
#         if self.count <= 50:
#             self.count += 1
#             return f"{self.values[self.count % 13]} {self.suits[self.count // 13]}"
#         else:
#             raise StopIteration
